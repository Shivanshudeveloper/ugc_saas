{"pageProps":{"article":{"content":"\r\n# Settings\r\n\r\nIt is important for your customers to have some control over the app interface. To make that\r\npossible you need a way to let the app know which are the user preferences. In order to achieve it,\r\nthe app uses a context that can make its data available in the entire component tree for usage and\r\ncontrol.\r\n\r\nCurrently, the app allows you to control the `theme`, and you can choose between available options,\r\ntoggle `RTL`\r\n(right-to-left text direction). This is a simple implementation to give you an idea\r\non how can the configurations be made. It might be in your best interest to adjust it to your\r\nbusiness needs. You might want to have a specific app interface, and allow other setup options, or\r\nremove some of the existing ones.\r\n\r\n## How it works\r\n\r\n```jsx\r\n// src/pages/_app.js\r\nimport { SettingsProvider } from '../contexts/settings-context';\r\n\r\nconst App = (props) => {\r\n  const { Component, pageProps } = props;\r\n    \r\n  return (\r\n    <SettingsProvider>\r\n      <Component {...pageProps} />\r\n    </SettingsProvider>\r\n  );\r\n};\r\n```\r\n\r\nThe content of the `App` component is wrapped with the `SettingsProvider`, and by doing this its \r\ncontext data is made available inside the component tree.\r\n\r\n## How to use\r\n\r\nThere are two methods, using the hook or the context consumer.\r\n\r\n```jsx\r\n// src/pages/index.js\r\nimport { useSettings } from '../hooks/useSettings';\r\n\r\nconst Home = () => {\r\n  const { settings } = useSettings();\r\n\r\n  return (\r\n    <div>\r\n      Current theme: {settings.theme}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n```jsx\r\n// src/pages/index.js\r\nimport { SettingsConsumer } from '../contexts/settings-context';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <SettingsConsumer>\r\n      {({settings}) => (\r\n        <div>\r\n          Current theme: {settings.theme}\r\n        </div>\r\n      )}\r\n    </SettingsConsumer>\r\n  );\r\n};\r\n```\r\n\r\n## Triggering the settings update\r\n\r\nIt can be implemented in any component within seconds.\r\n\r\n```jsx\r\n// src/pages/index.js\r\nimport { useSettings } from '../hooks/useSettings';\r\n\r\nconst Home = () => {\r\n  const { settings, saveSettings } = useSettings();\r\n\r\n  const handleSave = () => {\r\n    saveSettings({\r\n     ...settings,\r\n     theme: 'dark'\r\n   });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleSave}>\r\n        Save\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## Store / restore user preferences\r\n\r\nThe SettingsContext on mount event, it extracts stored settings from `localStorage` (if available);\r\nif not, a default value is provided. This can be extended and, instead of using the localStorage,\r\nyou can use a server. This gives the user the possibility to have the same settings across multiple\r\ndevices.\r\n","slug":"settings","title":"Settings"}},"__N_SSG":true}