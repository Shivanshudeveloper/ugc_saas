{"pageProps":{"article":{"content":"\r\n# Role Based Guard\r\n\r\nMany apps have complex user interfaces and flows. Some might have a list of routes for specific user\r\nroles or rights, such as admin, editor, content manager, etc, or even display a completely different\r\ninterface for the same route. If that's the case for your project, you may want to check whether the\r\nuser is authenticated their Access Control List (ACL)\r\nThis depends a lot on your business, and your chosen ACL implementation / provider.\r\n\r\nGuarding is a concept that usually refers to route protection, but it can also be applied to\r\ncomponents, and instead of redirecting the user to another route, you can render a different\r\ncomponent.\r\n\r\n## How it can be implemented\r\n\r\nThis guard is not created as there's no real way to know the actual business case, the needs, or the\r\nstrategy used in your specific app. Meanwhile, there are some standardized ACL strategies, there are\r\nstill too many of them and picking one is not fathomable in any way.\r\n\r\nAs an effect you can find below a suggestion on how it _could_ be implemented, should you want it.\r\n\r\nIn situations where various rights determine bits of the same UI, you may want to change the\r\nredirection to either only display the functionality as disabled or simply not display it. The \r\nconditional rendering scenario is a much easier one.\r\n\r\n```jsx\r\nconst RoleBasedGuard = (props) => {\r\n  const { children, permissions } = props;\r\n  const { user } = useAuth();\r\n  \r\n  // Here check the user permissions\r\n  const canView = true;\r\n  \r\n  if (!canView) {\r\n    return null;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nconst Overview = () => {\r\n  return (\r\n    <div>\r\n      <RoleBasedGuard permissions={['article/edit']}>\r\n        <div>\r\n          <button>\r\n            Edit\r\n          </button>\r\n        </div>\r\n      </RoleBasedGuard>\r\n      <ArticleContent />\r\n    </div>\r\n  );\r\n};\r\n```\r\n","slug":"role-based-guard","title":"Role Based Guard"}},"__N_SSG":true}