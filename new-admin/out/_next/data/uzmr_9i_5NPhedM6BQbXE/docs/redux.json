{"pageProps":{"article":{"content":"\r\n# Redux\r\n\r\nRedux is more robust alternative for state management, that offers more helpful features out of the\r\nbox. Follow the\r\n[official documentation](https://redux.js.org/basics/usage-with-react) to understand the entire\r\nconcept behind it.\r\n\r\n## Usage\r\n\r\nThe app uses `Redux Toolkit` with hooks (Thunk method, not Sagas) to manage the state\r\nfor `Calendar`, `Chat`,\r\n`Kanban` and `Mail` apps.\r\n\r\nThis can be replaced with `Context API`, or any other system, in a matter of hours due the clean\r\nstructure of the project.\r\n\r\nThe app at hand uses Redux, but you can find Context API examples in the project. You can also opt\r\nfor\r\n[Recoil](https://recoiljs.org/), maintained by **Facebook**, a new alternative that allows you to\r\nsplit the state in multiple \"atoms\". An example is not included, but the ones from Facebook\r\ndocumentation should be simple enough to use in your project.\r\n\r\n## How to use\r\n\r\nThere are 2 main folders:\r\n\r\n1. `src/slices` where you can find the implementation of the reducer logic.\r\n2. `src/store` which exports a store and combines the reducers in one root reducer.\r\n\r\nIf you're new to Redux Toolkit, please read\r\ntheir [official documentation](https://redux-toolkit.js.org/usage/usage-guide)\r\nto understand the basics.\r\n\r\n## Example\r\n\r\nYou can take as an example the blog feature of this app where; should you want to implement Redux;\r\nyou can do it as follows:\r\n\r\n### Create a new slice\r\n\r\nCreate a new file in `src/slices`, and name it `blog.js`. Now open this new file with your favorite\r\nIDE, and import\r\n`createSlice` from `@reduxjs/toolkit` package to create the new slice.\r\n\r\n```js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  articles: []\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'blog',\r\n  initialState,\r\n  reducers: {}\r\n});\r\n\r\nexport const { reducer } = slice;\r\n\r\nexport default slice;\r\n```\r\n\r\nIt is important to assign a name to the slice and an initial state.\r\n\r\n### Create a reducer action\r\n\r\nLet's get back to the newly created slice and add a `setArticles` action.\r\n\r\n```js\r\nconst slice = createSlice({\r\n  name: 'blog',\r\n  initialState,\r\n  reducers: {\r\n    setArticles(state, payload) {\r\n      // You should get articles from the action payload. \r\n      // For simplicity's sake let's use static data instead.\r\n\r\n      state.articles = [\r\n        {\r\n          id: '1',\r\n          title: 'My first article'\r\n        }\r\n      ];\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n> Important: The state is a Proxy object, you cannot update it directly, and you have to update its keys instead.\r\n>\r\n> For example `state = { name: 'Alex' }` will break the state, but `state.user = { name: 'Alex' }` works as expected.\r\n\r\n### Create a thunk method\r\n\r\nThis allows you to dispatch multiple actions, extremely useful for async requests.\r\n\r\nIn the created slice file, create a `getPosts` method that dispatches the slice `setArticles`\r\naction.\r\n\r\n```js\r\nexport const getPosts = () => async (dispatch) => {\r\n  // Here make an async request to your sever and extract the data from the server response\r\n  // const response = await axios.get('/__fake-api__/blog/articles');\r\n  // const { data } = reponse;\r\n\r\n  const data = [\r\n    {\r\n      id: '1',\r\n      title: 'My first article'\r\n    }\r\n  ];\r\n\r\n  dispatch(slice.actions.setArticles(data));\r\n};\r\n```\r\n\r\nNow, that you have a method that dispatches an action, you can update the `setArticles` action to\r\nuse the data from the payload.\r\n\r\n```js\r\nconst slice = createSlice({\r\n  name: 'blog',\r\n  initialState,\r\n  reducers: {\r\n    setArticles(state, payload) {\r\n      state.articles = payload.articles;\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Combine the new slice in the root reducer\r\n\r\nIn the file `src/store/rootReducer.js` use the reducer from your newly created slice.\r\n\r\n```js\r\nimport {reducer as blogReducer} from 'src/slices/blog';\r\n\r\nconst rootReducer = combineReducers({\r\n  // ...other reducers\r\n  blog: blogReducer\r\n});\r\n```\r\n\r\n### Using the slice state\r\n\r\n```jsx\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Blog = () => {\r\n  const { articles } = useSelector((state) => state.blog);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {articles.map((article) => (\r\n          <div>\r\n            Article ID: {article.id}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n> Please refrain from changing the state directly (without an action) in order to avoid chained re-renders.\r\n\r\n### Dispatching an action\r\n\r\nThis is the last step of the process. Execute the method `getPosts` to dispatch the slice action\r\nand update the slice state. Once the action sets the new state, the app will re-render your current\r\ncomponent, and the articles will be displayed.\r\n\r\n```jsx\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getPosts } from 'src/slices/blog';\r\n\r\nconst Blog = () => {\r\n  const dispatch = useDispatch();\r\n  const { articles } = useSelector((state) => state.blog);\r\n\r\n  const handleClick = () => {\r\n    dispatch(getPosts());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {articles.map((article) => (\r\n          <div>\r\n            Article ID: {article.id}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <Button onClick={handleClick}>\r\n        Load articles\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n","slug":"redux","title":"Redux"}},"__N_SSG":true}