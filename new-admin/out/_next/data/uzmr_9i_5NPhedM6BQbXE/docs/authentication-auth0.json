{"pageProps":{"article":{"content":"\r\n# Auth0\r\n\r\nAuth0 is an easy to implement, adaptable authentication and authorization platform. Auth0 provides a\r\nlibrary built for React, but the app uses a more generic library designed for universal SPAs. This\r\ngives you more control over the components, as the app needs to provide support for multiple\r\nauthentication providers. You can refer to their [documentation](https://auth0.com/docs/)\r\nas you deem fit, or in case you need things not covered in the app.\r\n\r\n## Set up your Auth0 account\r\n\r\nThe documentation for this, can be found in the official documentation of the service, mentioned\r\nabove.\r\n\r\n## Configuration\r\n\r\nTo configure Auth0 client library you have to open (or create) `.env` file in the project's root\r\nfolder and set the following variables as presented in your Auth0 account settings:\r\n\r\n```shell\r\nNEXT_PUBLIC_AUTH0_CLIENT_ID=\r\nNEXT_PUBLIC_AUTH0_DOMAIN=\r\n```\r\n\r\nIf you do not want to set up environment variables you can simply set the `auth0Config` object\r\nfrom `src/config.js` file.\r\n\r\n```js\r\nexport const auth0Config = {\r\n  client_id: '',\r\n  domain: ''\r\n};\r\n```\r\n\r\n## How it was implemented\r\n\r\nAs mentioned, Auth0 offers a set of components to help your development process, although they're\r\nnot used in the app.\r\n\r\nThe `Auth0Client` class from the library is used to provide the authentication feature to a\r\ncontext (which wraps the content of the `App` component).\r\n\r\nThis aforementioned context is then used in the component tree to access the `Auth0Client` instance\r\npublic methods. It provides the user authentication status and user profile, if available.\r\n\r\n## How to use Auth0 Provider\r\n\r\nBy default, the project uses a mocked `JWT provider` (as in: it doesn't use an actual JWT based\r\nauthentication server). To make use of Amplify simply follow these steps:\r\n\r\n### Step 1. Replace the provider\r\n\r\nOpen `src/pages/_app.js` file and replace the following line:\r\n\r\n```js\r\nimport { AuthConsumer, AuthProvider } from '../contexts/jwt-context';\r\n```\r\n\r\nwith\r\n\r\n```js\r\nimport { AuthConsumer, AuthProvider } from '../contexts/auth0-context';\r\n```\r\n\r\n### Step 2. Replace the hook context\r\n\r\nOpen `src/hooks/use-auth.js` file and replace the following line:\r\n\r\n```js\r\nimport { AuthContext } from '../contexts/jwt-context';\r\n```\r\n\r\nwith\r\n\r\n```js\r\nimport { AuthContext } from '../contexts/auth0-context';\r\n```\r\n\r\n## How to use auth\r\n\r\n### Retrieve user profile\r\n\r\nIn the example below, you can find how it can be used in any component not just the `App`. Should\r\nyou want to use it in any other component, you'll have to import the `useAuth` hook and use it as\r\nneeded.\r\n\r\n```jsx\r\n// src/pages/index.js\r\nimport { useAuth } from '../hooks/use-auth';\r\n\r\nconst Home = () => {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <div>\r\n      Email: {user.email}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Auth methods / actions\r\n\r\n> For simplicity and space limitations, the code below is used only to exemplify, actual code can be found in the components.\r\n\r\n```jsx\r\n// src/pages/index.js\r\nimport { useAuth } from '../hooks/use-auth';\r\n\r\nconst Home = () => {\r\n  const { loginWithPopup } = useAuth();\r\n  \r\n  const handleLogin = () => {\r\n    loginWithPopup();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleLogin}>\r\n        Login\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## Implemented flows\r\n\r\nCurrently, the app only covers the main flows:\r\n\r\n- Login with popup (also used to register)\r\n- Logout\r\n","slug":"authentication-auth0","title":"Auth0"}},"__N_SSG":true}