{"pageProps":{"article":{"content":"\r\n# Server Calls\r\n\r\nThe application simulates all server calls using in memory data storage. This can be easily modified\r\nto connect to any server.\r\n\r\nYou can use any library you like. Most apps use [Axios](https://github.com/axios/axios) since it\r\nallows you to create instances, attach interceptors, and many other features. Another good\r\nalternative could be [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n\r\n## Example of current implementation\r\n\r\n```jsx\r\nclass CustomerApi {\r\n  getCustomers() {\r\n    return Promise.resolve([\r\n      {\r\n        id: '238339KDC',\r\n        name: 'John'   \r\n      }\r\n    ]);\r\n  }\r\n};\r\n\r\nconst customerApi = new CustomerApi();\r\n\r\nconst Customers = () => {\r\n  const [customers, setCustomers] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getCustomers = async () => {\r\n      const result = await customerApi.getCustomers();\r\n      setCustomers(result);\r\n    };\r\n\r\n    getCustomers();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* render content */}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\nThe `customerApi` is a singleton class instance that simply responds with a Promise. You can add as\r\nmany requests methods as you need, test request structure or even use as middleware between UI and\r\nserver request to process your input and output data.\r\n\r\n## Example with Fetch\r\n\r\n```jsx\r\nconst Customers = () => {\r\n  const [customers, setCustomers] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getCustomers = async () => {\r\n      const response = await fetch('/api/customers');\r\n      const data = await response.json();\r\n      setCustomers(data);\r\n    };\r\n\r\n    getCustomers();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* render content */}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## Example with Axios\r\n\r\n```jsx\r\nimport axios from 'axios'; // You need to install it\r\n\r\nconst Customers = () => {\r\n  const [customers, setCustomers] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const getCustomers = async () => {\r\n      const response = await axios.get('/api/customers');\r\n      setCustomers(response.data);\r\n    };\r\n\r\n    getCustomers();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* render content */}\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## Axios Request interceptors\r\n\r\nBy using Axios you are able to\r\nintegrate [Axios Mock Adapter](https://github.com/ctimmerm/axios-mock-adapter) to simulate real\r\nserver calls. To archive that, you have to create an Axios instance and use it whenever you make a\r\nrequest call. Now you can extend your instance and add Axios Mock Adapter to listen for requests and\r\nreturn custom data.\r\n\r\n## Adding request interceptors\r\n\r\nIt takes ony a few seconds to add a new http request listener. The interceptor has a similar format\r\nto Express JS, for example:\r\n\r\n```js\r\nimport axios from 'axios';  // You need to install it\r\nimport AxiosMockAdapter from 'axios-mock-adapter';  // You need to install it\r\n\r\nexport const axiosInstance = axios.create();\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => Promise.reject((error.response && error.response.data) || 'Something went wrong')\r\n);\r\n\r\nconst mock = new AxiosMockAdapter(axiosInstance, {delayResponse: 0});\r\n\r\nmock.onGet('/__fake-api__/invoices').reply(200, {\r\n  invoices: [\r\n    {id: 1, total: 32.43},\r\n    {id: 2, total: 67.00}\r\n  ]\r\n});\r\n```\r\n\r\nNow instead of importing axios from `axios` node module, import the exported `axiosInstance` to get\r\nthe customers' data.\r\n\r\n## Removing existing request interceptors\r\n\r\nThere are two ways:\r\n\r\n1. Simply use a new axios instance.\r\n2. Remove the mocked listeners.\r\n","slug":"server-calls","title":"Server Calls"}},"__N_SSG":true}